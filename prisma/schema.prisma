// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id                       String                    @id @default(uuid())
  year                     Int
  title                    String
  code                     String
  startMonth               String
  endMonth                 String
  isCurrent                Boolean                   @default(false)
  createAt                 DateTime                  @default(now())
  updateAt                 DateTime                  @updatedAt
  students                 Student[]
  semesterRegister         SemesterRegistration[]
  studentEnrollCourses     StudentEnrollCourse[]
  studentEnrollCourseMarks StudentEnrollCourseMark[]
  studentSemesterPayment   StudentSemesterPayment[]

  @@map("academic_semesters")
}

model AcademicFaculty {
  id                  String               @id @default(uuid())
  title               String
  createAt            DateTime             @default(now())
  updateAt            DateTime             @updatedAt
  academicDepartments AcademicDepartment[]
  students            Student[]
  faculties           Faculty[]

  @@map("academic_faculty")
}

model AcademicDepartment {
  id                String          @id @default(uuid())
  title             String
  createAt          DateTime        @default(now())
  updateAt          DateTime        @updatedAt
  academicFacultyId String
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  students          Student[]
  faculties         Faculty[]
  offeredCourse     OfferedCourse[]

  @@map("academic_departments")
}

model Student {
  id           String   @id @default(uuid())
  studentId    String?
  firstName    String
  lastName     String
  profileImage String?
  email        String
  contact      String
  gender       String
  bloodgroup   String
  createAt     DateTime @default(now())
  updateAt     DateTime @updatedAt

  academicSemesterId                 String
  academicSemester                   AcademicSemester                    @relation(fields: [academicSemesterId], references: [id])
  academicDepartmentId               String
  academicDepartment                 AcademicDepartment                  @relation(fields: [academicDepartmentId], references: [id])
  academicFacultyId                  String
  academicFaculty                    AcademicFaculty                     @relation(fields: [academicFacultyId], references: [id])
  studentSemesterRegistration        StudentSemesterRegistration[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]
  studentEnrollCourses               StudentEnrollCourse[]
  studentEnrollCourseMarks           StudentEnrollCourseMark[]
  studentSemesterPayment             StudentSemesterPayment[]
  studentAcademicInfo                StudentAcademicInfo[]

  @@map("students")
}

model Faculty {
  id           String   @id @default(uuid())
  facultyId    String?
  firstName    String
  lastName     String
  profileImage String?
  email        String
  contact      String
  gender       String
  bloodgroup   String
  designation  String
  createAt     DateTime @default(now())
  updateAt     DateTime @updatedAt

  academicDepartmentId       String
  academicDepartment         AcademicDepartment           @relation(fields: [academicDepartmentId], references: [id])
  academicFacultyId          String
  academicFaculty            AcademicFaculty              @relation(fields: [academicFacultyId], references: [id])
  course                     courseFaculty[]
  offeredCourseClassSchedule OfferedCourseClassSchedule[]

  @@map("faculties")
}

model Building {
  id       String   @id @default(uuid())
  title    String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  Room     Room[]

  @@map("building")
}

model Room {
  id                         String                       @id @default(uuid())
  roomNumber                 String
  floor                      String
  buildingId                 String
  building                   Building                     @relation(fields: [buildingId], references: [id])
  createAt                   DateTime                     @default(now())
  updateAt                   DateTime                     @updatedAt
  offeredCourseClassSchedule OfferedCourseClassSchedule[]

  @@map("rooms")
}

model Course {
  id                   String                 @id @default(uuid())
  title                String
  code                 String
  credit               Int?
  createAt             DateTime               @default(now())
  updateAt             DateTime               @updatedAt
  rerequisite          CourseToPrerequisite[] @relation("courseToPrerequisite")
  PrerequisiteFor      CourseToPrerequisite[] @relation("prerequisiteToCourse")
  faculty              courseFaculty[]
  offeredCourse        OfferedCourse[]
  studentEnrollCourses StudentEnrollCourse[]

  @@map("courses")
}

model CourseToPrerequisite {
  courseId       String
  course         Course @relation(fields: [courseId], references: [id], name: "courseToPrerequisite")
  prerequisiteId String
  prerequisite   Course @relation(fields: [prerequisiteId], references: [id], name: "prerequisiteToCourse")

  @@id([courseId, prerequisiteId])
}

model courseFaculty {
  courseId  String
  course    Course  @relation(fields: [courseId], references: [id])
  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("course_faculties")
}

enum semesterRegisterStatus {
  UPCOMMING
  ONGOING
  ENDED
}

model SemesterRegistration {
  id                                 String                              @id @default(uuid())
  startDate                          DateTime
  endDate                            DateTime
  status                             semesterRegisterStatus?
  minCredit                          Int                                 @default(0)
  maxCredit                          Int                                 @default(0)
  createAt                           DateTime                            @default(now())
  updateAt                           DateTime                            @updatedAt
  academicSemesterId                 String
  academicSemester                   AcademicSemester                    @relation(fields: [academicSemesterId], references: [id])
  offeredCourse                      OfferedCourse[]
  offeredCourseSection               OfferedCourseSection[]
  offeredCourseClassSchedule         OfferedCourseClassSchedule[]
  studentSemesterRegistration        StudentSemesterRegistration[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("semester_registration")
}

model OfferedCourse {
  id                                 String                              @id @default(uuid())
  createAt                           DateTime                            @default(now())
  updateAt                           DateTime                            @updatedAt
  courseId                           String
  course                             Course                              @relation(fields: [courseId], references: [id])
  academicDepartmentId               String
  department                         AcademicDepartment                  @relation(fields: [academicDepartmentId], references: [id])
  semesterRegistrationId             String
  semesterRegistration               SemesterRegistration                @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseSection               OfferedCourseSection[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("offerd_course")
}

model OfferedCourseSection {
  id                               String                              @id @default(uuid())
  title                            String
  maxCapacity                      Int
  currentlyEnrolledStudent         Int                                 @default(0)
  createAt                         DateTime                            @default(now())
  updateAt                         DateTime                            @updatedAt
  offeredCourseId                  String
  offeredCourse                    OfferedCourse                       @relation(fields: [offeredCourseId], references: [id])
  semesterRegistrationId           String
  semesterRegistration             SemesterRegistration                @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseClassSchedule       OfferedCourseClassSchedule[]
  studentSemesterRegistrationCours StudentSemesterRegistrationCourse[]

  @@map("offered_course_section")
}

enum weekDays {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

model OfferedCourseClassSchedule {
  id                     String               @id @default(uuid())
  startTime              String
  endTime                String
  dayOfWeek              weekDays             @default(SATURDAY)
  createAt               DateTime             @default(now())
  updateAt               DateTime             @updatedAt
  offeredCourseSectionId String
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  roomId                 String
  room                   Room                 @relation(fields: [roomId], references: [id])
  facultyId              String
  faculty                Faculty              @relation(fields: [facultyId], references: [id])

  @@map("offered_course_class_schedule")
}

model StudentSemesterRegistration {
  id                     String               @id @default(uuid())
  isConfirm              Boolean?             @default(false)
  totalCreditsTaken      Int                  @default(0)
  createAt               DateTime             @default(now())
  updateAt               DateTime             @updatedAt
  studentId              String
  student                Student              @relation(fields: [studentId], references: [id])
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  @@map("student_semester_registration")
}

model StudentSemesterRegistrationCourse {
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  studentId              String
  student                Student              @relation(fields: [studentId], references: [id])
  offeredCourseId        String
  offeredCourse          OfferedCourse        @relation(fields: [offeredCourseId], references: [id])
  offeredCourseSectionId String
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])
  createAt               DateTime             @default(now())
  updateAt               DateTime             @updatedAt

  @@id([semesterRegistrationId, studentId])
  @@map("student_semester_registration_course")
}

enum StudentEnrollCourseStatus {
  COMPLETE
  ONGOING
  WITHDRAWN
}

model StudentEnrollCourse {
  id                       String                    @id @default(uuid())
  studentId                String
  student                  Student                   @relation(fields: [studentId], references: [id])
  courseId                 String
  course                   Course                    @relation(fields: [courseId], references: [id])
  academicSemesterId       String
  academicSemester         AcademicSemester          @relation(fields: [academicSemesterId], references: [id])
  grade                    String?
  point                    Float?                    @default(0)
  totalMarks               Int?                      @default(0)
  status                   StudentEnrollCourseStatus @default(ONGOING)
  createAt                 DateTime                  @default(now())
  updateAt                 DateTime                  @updatedAt
  studentEnrollCourseMarks StudentEnrollCourseMark[]

  @@map("student_enroll_course")
}

enum ExamType {
  MIDTERM
  FINAL
}

model StudentEnrollCourseMark {
  id                    String              @id @default(uuid())
  studentId             String
  student               Student             @relation(fields: [studentId], references: [id])
  studentEnrollCourseId String
  studentEnrollCourse   StudentEnrollCourse @relation(fields: [studentEnrollCourseId], references: [id])
  academicSemesterId    String
  academicSemester      AcademicSemester    @relation(fields: [academicSemesterId], references: [id])
  grade                 String?
  marks                 Int?
  examType              ExamType?           @default(MIDTERM)
  createAt              DateTime            @default(now())
  updateAt              DateTime            @updatedAt

  @@map("student_enroll_course_mark")
}

enum PaymentStatus {
  PENDING
  PARTIAL_PAID
  FULL_PAID
}

model StudentSemesterPayment {
  id                   String           @id @default(uuid())
  studentId            String
  student              Student          @relation(fields: [studentId], references: [id])
  academicSemesterId   String
  academicSemester     AcademicSemester @relation(fields: [academicSemesterId], references: [id])
  fullPaymentAmount    Int?             @default(0)
  partialPaymentAmount Int?             @default(0)
  totalPaidAmount      Int?             @default(0)
  totalDueAmount       Int?             @default(0)
  paymentStatus        PaymentStatus    @default(PENDING)
  createAt             DateTime         @default(now())
  updateAt             DateTime         @updatedAt

  @@map("student_semester_payment")
}

model StudentAcademicInfo {
  id                   String   @id @default(uuid())
  studentId            String
  student              Student  @relation(fields: [studentId], references: [id])
  totalCompletedCredit Int?     @default(0)
  cgpa                 Float?   @default(0)
  createAt             DateTime @default(now())
  updateAt             DateTime @updatedAt

  @@map("student_academic_info")
}
