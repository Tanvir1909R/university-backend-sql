// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id         String    @id @default(uuid())
  year       Int
  title      String
  code       String
  startMonth String
  endMonth   String
  createAt   DateTime  @default(now())
  updateAt   DateTime  @updatedAt
  students   Student[]

  @@map("academic_semesters")
}

model AcademicFaculty {
  id                  String               @id @default(uuid())
  title               String
  createAt            DateTime             @default(now())
  updateAt            DateTime             @updatedAt
  academicDepartments AcademicDepartment[]
  students            Student[]
  faculties           Faculty[]

  @@map("academic_faculty")
}

model AcademicDepartment {
  id                String          @id @default(uuid())
  title             String
  createAt          DateTime        @default(now())
  updateAt          DateTime        @updatedAt
  academicFacultyId String
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  students          Student[]
  faculties         Faculty[]

  @@map("academic_departments")
}

model Student {
  id           String   @id @default(uuid())
  studentId    String?
  firstName    String
  lastName     String
  profileImage String?
  email        String
  contact      String
  gender       String
  bloodgroup   String
  createAt     DateTime @default(now())
  updateAt     DateTime @updatedAt

  academicSemesterId   String
  academicSemester     AcademicSemester   @relation(fields: [academicSemesterId], references: [id])
  academicDepartmentId String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicFacultyId    String
  academicFaculty      AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])

  @@map("students")
}

model Faculty {
  id           String   @id @default(uuid())
  facultyId    String?
  firstName    String
  lastName     String
  profileImage String?
  email        String
  contact      String
  gender       String
  bloodgroup   String
  designation  String
  createAt     DateTime @default(now())
  updateAt     DateTime @updatedAt

  academicDepartmentId String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicFacultyId    String
  academicFaculty      AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])

  @@map("faculties")
}

model Building {
  id       String   @id @default(uuid())
  title    String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  Room     Room[]

  @@map("building")
}

model Room {
  id         String   @id @default(uuid())
  roomNunber String
  floor      String
  buildingId String
  building   Building @relation(fields: [buildingId], references: [id])
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt

  @@map("rooms")
}

model Course {
  id                   String                 @id @default(uuid())
  title                String
  code                 String
  credit               Int?
  createAt             DateTime               @default(now())
  updateAt             DateTime               @updatedAt
  rerequisite          CourseToPrerequisite[] @relation("courseToPrerequisite")
  PrerequisiteFor      CourseToPrerequisite[] @relation("prerequisiteToCourse")

  @@map("courses")
}

model CourseToPrerequisite {
  courseId       String
  course         Course @relation(fields: [courseId], references: [id], name: "courseToPrerequisite")
  prerequisiteId String
  prerequisite   Course @relation(fields: [prerequisiteId], references: [id], name: "prerequisiteToCourse")

  @@id([courseId, prerequisiteId])
}
